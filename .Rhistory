mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
## function1
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance ){
beta <- rnorm(n = n, mean = 0, sd=1)
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
}
## function1
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
beta <- rnorm(n = n, mean = 0, sd=1)
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
## function1
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
beta <- rnorm(n = n, mean = 0, sd=1)
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
## function1
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
beta <- rnorm(n = n, mean = 0, sd=1)
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
rix(0, nrow = p, ncol = p)
mat[1:p_ac
imulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
beta <- rnorm(n = n, mean = 0, sd=1)
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
## function1
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mat <- matrix(0, nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat) <- var
mns_1   <- c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p = p-p_active))
mvnfast::rmvn(n = n, mu = mns_1, sigma = mat)
}
## function1
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mdiag(mattrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
}
## function1
set.seed(0)
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mdiag(mattrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
}
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active)), sigma = mat)
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mdiag(mattrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active), sigma = mat)
}
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mdiag(mmatrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active), sigma = mat)
}
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var, #variance
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mdiag(mmatrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active), sigma = mat)
}
# function1
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mdiag(mmatrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active), sigma = mat)
}
simulate1(50,80,30,0.2,2)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- diag(mmatrix(p)[1:p_active, 1:p_active] <- rho) <- var
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active), sigma = mat)
}
simulate1(50,80,30,0.2,2)
## function1
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mmatrix(p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = rep(0,p), rep(0, p-p_active), sigma = mat)
}
simulate1(50,80,30,0.2,2)
## function1
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mmatrix(p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = rep(0,p), sigma = mat)
}
## function1
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var
){
mmatrix <- function(p) {
matrix(0,nrow = p, ncol = p)
}
mat <- mmatrix(p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = rep(0,p), sigma = mat)
}
simulate1(50,80,30,0.2,2)
## function1
set.seed(0)
simulate1 <- function(n,#number of samples
p, #total parameters
p_active,
rho, #correlation
var
){
mat <- matrix(0,nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
}
simulate1(50,80,30,0.2,2)
beta <- c(rpois(n , lambda = lambda), rep(0, p-p_active))
## function1 -simulate
set.seed(0)
simulate1 <- function(n,#number of samples
lambda,
p, #total parameters
p_active,
rho, #correlation
var
){
beta <- c(rpois(n , lambda = lambda), rep(0, p-p_active))
mat <- matrix(0,nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
}
simulate1(50,0.35,80,30,0.2,2)
simulate1(50,0.35,80,30,0.2,2)$beta
simulate1 <- function(n,#number of samples
lambda,
p, #total parameters
p_active,
rho, #correlation
var
){
mat <- matrix(0,nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
c(rpois(n , lambda = lambda), rep(0, p-p_active))
}
simulate1(50,0.35,80,30,0.2,2)$beta
simulate1(50,0.35,80,30,0.2,2)
## function1 -simulate
set.seed(0)
simulate1 <- function(n,#number of samples
#lambda,
p, #total parameters
p_active,
rho, #correlation
var
){
mat <- matrix(0,nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
mvnfast::rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
#c(rpois(n , lambda = lambda), rep(0, p-p_active))
}
simulate1(50,80,30,0.2,2)
install.packages("robStepSplitReg", dependencies = TRUE)
rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
library("mvnfast")
set.seed(0)
simulate1 <- function(n,#number of samples
#lambda,
p, #total parameters
p_active,
rho, #correlation
var
){
mat <- matrix(0,nrow = p, ncol = p)
mat[1:p_active, 1:p_active] <- rho
diag(mat)<- var
rmvn(n, mu = c(rnorm(n = p_active, mean = 0, sd = 1), rep(0, p-p_active)), sigma = mat)
#c(rpois(n , lambda = lambda), rep(0, p-p_active))
}
simulate1(50,80,30,0.2,2)
#2
dat1 <- rnorm_multi(n = 100,
mu = c(rnorm(n= p_active, mean = 0, sd = 2), rep(0,50)),
sd = c(rep(1, p_active),rep(0,50)),
r = 0.3,
empirical = FALSE)
dat1
isSymmetric(dat1)
simulate1(50,80,30,0.2,2)
rho1_10<- .3
rho11_30 <- .2
cmat <- c(rep(rho1_2,10), rep(rho11_30,20)
bvn <- rnorm_multi(n, 4, 0, 1, cmat)
cmat <- c(rep(rho1_2,10), rep(rho11_30,20))
cmat <- c(rep(rho1_10,10), rep(rho11_30,20))
bvn <- rnorm_multi(n, 4, 0, 1, cmat)
rho1_2 <- .3
rho1_3 <- .5
rho1_4 <- .5
rho2_3 <- .2
rho2_4 <- 0
rho3_4 <- -.3
cmat <- c(rho1_2, rho1_3, rho1_4, rho2_3, rho2_4, rho3_4)
print(cmat)
install.packages("robStepSplitReg", dependencies = TRUE)
install.packages("pense")
install.packages("RcppArmadillo")
sudo xcode-select --install
sudo xcode
xcode
install.packages("robStepSplitReg", dependencies = TRUE)
install.packages("robStepSplitReg", dependencies = TRUE)
library(robStepSplitReg)
# Required library
install.packages("mvnfast")
library(mvnfast)
# Simulation parameters
n <- 50
p <- 500
rho <- 0.8
p.active <- 100
snr <- 3
contamination.prop <- 0.2
# Setting the seed
set.seed(0)
# Simulation of beta vector
true.beta <- c(runif(p.active, 0, 5)*(-1)^rbinom(p.active, 1, 0.7), rep(0, p - p.active))
# Simulation of uncontaminated data
sigma.mat <- matrix(0, nrow = p, ncol = p)
sigma.mat[1:p.active, 1:p.active] <- rho
diag(sigma.mat) <- 1
x <- mvnfast::rmvn(n, mu = rep(0, p), sigma = sigma.mat)
sigma <- as.numeric(sqrt(t(true.beta) %*% sigma.mat %*% true.beta)/sqrt(snr))
y <- x %*% true.beta + rnorm(n, 0, sigma)
# Contamination of data
contamination_indices <- 1:floor(n*contamination.prop)
k_lev <- 2
k_slo <- 100
x_train <- x
y_train <- y
beta_cont <- true.beta
beta_cont[true.beta!=0] <- beta_cont[true.beta!=0]*(1 + k_slo)
beta_cont[true.beta==0] <- k_slo*max(abs(true.beta))
for(cont_id in contamination_indices){
a <- runif(p, min = -1, max = 1)
a <- a - as.numeric((1/p)*t(a) %*% rep(1, p))
x_train[cont_id,] <- mvnfast::rmvn(1, rep(0, p), 0.1^2*diag(p)) +
k_lev * a / as.numeric(sqrt(t(a) %*% solve(sigma.mat) %*% a))
y_train[cont_id] <- t(x_train[cont_id,]) %*% beta_cont
}
# Ensemble models
ensemble_fit <- robStepSplitReg(x_train, y_train,
n_models = 5,
model_saturation = c("fixed", "p-value")[1],
alpha = 0.05, model_size = 25,
robust = TRUE,
compute_coef = TRUE,
pense_alpha = 1/4, pense_cv_k = 5, pense_cv_repl = 1,
cl = NULL)
n <- 50
p <- 500
rho <- 0.8
p.active <- 100
snr <- 3
contamination.prop <- 0.2
# Setting the seed
set.seed(0)
true.beta <- c(runif(p.active, 0, 5)*(-1)^rbinom(p.active, 1, 0.7), rep(0, p - p.active))
# Simulation of uncontaminated data
sigma.mat <- matrix(0, nrow = p, ncol = p)
sigma.mat[1:p.active, 1:p.active] <- rho
diag(sigma.mat) <- 1
x <- mvnfast::rmvn(n, mu = rep(0, p), sigma = sigma.mat)
sigma <- as.numeric(sqrt(t(true.beta) %*% sigma.mat %*% true.beta)/sqrt(snr))
y <- x %*% true.beta + rnorm(n, 0, sigma)
# Contamination of data
contamination_indices <- 1:floor(n*contamination.prop)
k_lev <- 2
k_slo <- 100
x_train <- x
y_train <- y
beta_cont <- true.beta
beta_cont[true.beta!=0] <- beta_cont[true.beta!=0]*(1 + k_slo)
beta_cont[true.beta==0] <- k_slo*max(abs(true.beta))
for(cont_id in contamination_indices){
# Simulation of uncontaminated data
sigma.mat <- matrix(0, nrow = p, ncol = p)
# Contamination of data
contamination_indices <- 1:floor(n*contamination.prop)
k_lev <- 2
k_slo <- 100
x_train <- x
y_train <- y
beta_cont <- true.beta
beta_cont[true.beta!=0] <- beta_cont[true.beta!=0]*(1 + k_slo)
beta_cont[true.beta==0] <- k_slo*max(abs(true.beta))
for(cont_id in contamination_indices){
a <- runif(p, min = -1, max = 1)
a <- a - as.numeric((1/p)*t(a) %*% rep(1, p))
x_train[cont_id,] <- mvnfast::rmvn(1, rep(0, p), 0.1^2*diag(p)) +
k_lev * a / as.numeric(sqrt(t(a) %*% solve(sigma.mat) %*% a))
y_train[cont_id] <- t(x_train[cont_id,]) %*% beta_cont
}
# Ensemble models
ensemble_fit <- robStepSplitReg(x_train, y_train,
n_models = 5,
model_saturation = c("fixed", "p-value")[1],
alpha = 0.05, model_size = 25,
robust = TRUE,
compute_coef = TRUE,
pense_alpha = 1/4, pense_cv_k = 5, pense_cv_repl = 1,
cl = NULL)
# Ensemble coefficients
ensemble_coefs <- coef(ensemble_fit, group_index = 1:ensemble_fit$n_models)
sens_ensemble <- sum(which((ensemble_coefs[-1]!=0)) <= p.active)/p.active
spec_ensemble <- sum(which((ensemble_coefs[-1]!=0)) <= p.active)/sum(ensemble_coefs[-1]!=0)
Simulation of test data
m <- 2e3
x_test <- mvnfast::rmvn(m, mu = rep(0, p), sigma = sigma.mat)
y_test <- x_test %*% true.beta + rnorm(m, 0, sigma)
# Prediction of test samples
ensemble_preds <- predict(ensemble_fit, newx = x_test,
group_index = 1:ensemble_fit$n_models,
dynamic = FALSE)
mspe_ensemble <- mean((y_test - ensemble_preds)^2)/sigma^2
# Ensemble coefficients
ensemble_coefs <- coef(ensemble_fit, group_index = 1:ensemble_fit$n_models)
# Ensemble models
ensemble_fit <- robStepSplitReg(x_train, y_train,
n_models = 5,
model_saturation = c("fixed", "p-value")[1],
alpha = 0.05, model_size = 25,
robust = TRUE,
compute_coef = TRUE,
pense_alpha = 1/4, pense_cv_k = 5, pense_cv_repl = 1,
cl = NULL)
install.packages("robStepSplitReg", dependencies = TRUE)
library(robStepSplitReg)
# Ensemble coefficients
ensemble_coefs <- coef(ensemble_fit, group_index = 1:ensemble_fit$n_models)
# Ensemble models
ensemble_fit <- robStepSplitReg(x_train, y_train,
n_models = 5,
model_saturation = c("fixed", "p-value")[1],
alpha = 0.05, model_size = 25,
robust = TRUE,
compute_coef = TRUE,
pense_alpha = 1/4, pense_cv_k = 5, pense_cv_repl = 1,
cl = NULL)
# Ensemble coefficients
ensemble_coefs <- coef(ensemble_fit, group_index = 1:ensemble_fit$n_models)
sens_ensemble <- sum(which((ensemble_coefs[-1]!=0)) <= p.active)/p.active
spec_ensemble <- sum(which((ensemble_coefs[-1]!=0)) <= p.active)/sum(ensemble_coefs[-1]!=0)
# Simulation of test data
m <- 2e3
x_test <- mvnfast::rmvn(m, mu = rep(0, p), sigma = sigma.mat)
y_test <- x_test %*% true.beta + rnorm(m, 0, sigma)
# Prediction of test samples
ensemble_preds <- predict(ensemble_fit, newx = x_test,
group_index = 1:ensemble_fit$n_models,
dynamic = FALSE)
mspe_ensemble <- mean((y_test - ensemble_preds)^2)/sigma^2
mspe_ensemble
source("~/Documents/NSERC/R Files/Simulations /Functions/Testing.R")
setwd("~/Documents/GitHub/TwoStepRobust")
Rcpp::sourceCpp("SparseShootingS/sparseShootingS.cpp")
